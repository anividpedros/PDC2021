function [OEd, OE0] = drifted_oe_at_secss( secular_model, dt, OE0, OEp )

% Using secular model generated by secular_model_10BP

% Structure set-up
% ev: Matrix of eigenvectors of H and K
% iv: Matrix of eigenvectors of P and Q
% g:  Frequencies of the H-K eigenvalue problem
% f:  Frequencies of the P-Q eigenvalue problem
% phaseE: Integration constants set to match ICs at t0
% phaseI: Integration constants set to match ICs at t0
% p: Position of the particle in the secular model 
%    (ordered by semi-major axis!)

eji = secular_model.ev;
Iji = secular_model.iv;
gi  = secular_model.g;
fi  = secular_model.f;
Betai = secular_model.phaseE;
Gammai= secular_model.phaseI;
Ev  = secular_model.Ejk ;
s0  = secular_model.s0  ;

i0    = secular_model.p;
np    = length( gi );
pl    = secular_model.pl;

% Evaluate secular solution
H = eji*sin( gi*dt + Betai );
K = eji*cos( gi*dt + Betai );
P = Iji*sin( fi*dt + Gammai );
Q = Iji*cos( fi*dt + Gammai );

% Assemble Outputs --- Alternative Approach
H2 = H.*H;
K2 = K.*K;

P2 = P.*P;
Q2 = Q.*Q;

E = sqrt( H2 + K2 );
W = atan2( H, K );
I = sqrt( P2 + Q2 );
OM = atan2( P, Q );

S = s0 + Ev*dt ;

% OE0 = [OE0(1); E(i0); I(i0); OM(i0); W(i0) - OM(i0); OE0(6) ];
OE0 = [OE0(1); E(i0); I(i0); OM(i0); W(i0) - OM(i0); S(i0) ];

zcol = zeros(np,1);
OEd = [zcol E I OM W-OM S];
OEd(i0,:) = [];
OEd(:,1) = OEp(pl,1);
% OEd(:,6) = OEp(pl,6);

% Assemble Outputs --- Original Approach
% Eq0 = [0; H(i0); K(i0); P(i0); Q(i0); 0];
% OE0 = Equi_2_Keplerian( Eq0 );
% 
% inds= [ 1:(i0-1) (i0+1):np ];
% OEd = zeros(np-1,6);
% for i=1:(np-1)
%     Eq = [0; H(inds(i)); K(inds(i)); P(inds(i)); Q(inds(i)); 0];
%     OEd(i,:) = Equi_2_Keplerian( Eq );
% end

% Common for both
% EQd = [zcol H K P Q zcol];
